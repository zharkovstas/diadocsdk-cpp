// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Employees/EmployeeToUpdate.proto

#ifndef PROTOBUF_Employees_2fEmployeeToUpdate_2eproto__INCLUDED
#define PROTOBUF_Employees_2fEmployeeToUpdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Employees/Employee.pb.h"
#include "OrganizationUserPermissions.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Employees {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

class EmployeeToUpdate;
class EmployeePermissionsPatch;
class EmployeeDepartmentPatch;
class EmployeeIsAdministratorPatch;
class EmployeeDocumentAccessLevelPatch;
class EmployeeSelectedDepartmentsPatch;
class EmployeePositionPatch;
class EmployeeCanBeInvitedForChatPatch;

// ===================================================================

class EmployeeToUpdate : public ::google::protobuf::Message {
 public:
  EmployeeToUpdate();
  virtual ~EmployeeToUpdate();

  EmployeeToUpdate(const EmployeeToUpdate& from);

  inline EmployeeToUpdate& operator=(const EmployeeToUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeToUpdate& default_instance();

  void Swap(EmployeeToUpdate* other);

  // implements Message ----------------------------------------------

  EmployeeToUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeToUpdate& from);
  void MergeFrom(const EmployeeToUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Employees.EmployeePermissionsPatch Permissions = 1;
  inline bool has_permissions() const;
  inline void clear_permissions();
  static const int kPermissionsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch& permissions() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch* mutable_permissions();
  inline ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch* release_permissions();
  inline void set_allocated_permissions(::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch* permissions);

  // optional .Diadoc.Api.Proto.Employees.EmployeePositionPatch Position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Employees::EmployeePositionPatch& position() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeePositionPatch* mutable_position();
  inline ::Diadoc::Api::Proto::Employees::EmployeePositionPatch* release_position();
  inline void set_allocated_position(::Diadoc::Api::Proto::Employees::EmployeePositionPatch* position);

  // optional .Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch CanBeInvitedForChat = 3;
  inline bool has_canbeinvitedforchat() const;
  inline void clear_canbeinvitedforchat();
  static const int kCanBeInvitedForChatFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch& canbeinvitedforchat() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch* mutable_canbeinvitedforchat();
  inline ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch* release_canbeinvitedforchat();
  inline void set_allocated_canbeinvitedforchat(::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch* canbeinvitedforchat);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
 private:
  inline void set_has_permissions();
  inline void clear_has_permissions();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_canbeinvitedforchat();
  inline void clear_has_canbeinvitedforchat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch* permissions_;
  ::Diadoc::Api::Proto::Employees::EmployeePositionPatch* position_;
  ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch* canbeinvitedforchat_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeToUpdate* default_instance_;
};
// -------------------------------------------------------------------

class EmployeePermissionsPatch : public ::google::protobuf::Message {
 public:
  EmployeePermissionsPatch();
  virtual ~EmployeePermissionsPatch();

  EmployeePermissionsPatch(const EmployeePermissionsPatch& from);

  inline EmployeePermissionsPatch& operator=(const EmployeePermissionsPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeePermissionsPatch& default_instance();

  void Swap(EmployeePermissionsPatch* other);

  // implements Message ----------------------------------------------

  EmployeePermissionsPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeePermissionsPatch& from);
  void MergeFrom(const EmployeePermissionsPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch Department = 1;
  inline bool has_department() const;
  inline void clear_department();
  static const int kDepartmentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch& department() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch* mutable_department();
  inline ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch* release_department();
  inline void set_allocated_department(::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch* department);

  // optional .Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch IsAdministrator = 2;
  inline bool has_isadministrator() const;
  inline void clear_isadministrator();
  static const int kIsAdministratorFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch& isadministrator() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch* mutable_isadministrator();
  inline ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch* release_isadministrator();
  inline void set_allocated_isadministrator(::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch* isadministrator);

  // optional .Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch DocumentAccessLevel = 3;
  inline bool has_documentaccesslevel() const;
  inline void clear_documentaccesslevel();
  static const int kDocumentAccessLevelFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch& documentaccesslevel() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch* mutable_documentaccesslevel();
  inline ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch* release_documentaccesslevel();
  inline void set_allocated_documentaccesslevel(::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch* documentaccesslevel);

  // optional .Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch SelectedDepartments = 4;
  inline bool has_selecteddepartments() const;
  inline void clear_selecteddepartments();
  static const int kSelectedDepartmentsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch& selecteddepartments() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch* mutable_selecteddepartments();
  inline ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch* release_selecteddepartments();
  inline void set_allocated_selecteddepartments(::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch* selecteddepartments);

  // repeated .Diadoc.Api.Proto.Employees.EmployeeAction Actions = 5;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeAction& actions(int index) const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeAction* mutable_actions(int index);
  inline ::Diadoc::Api::Proto::Employees::EmployeeAction* add_actions();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction >&
      actions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction >*
      mutable_actions();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
 private:
  inline void set_has_department();
  inline void clear_has_department();
  inline void set_has_isadministrator();
  inline void clear_has_isadministrator();
  inline void set_has_documentaccesslevel();
  inline void clear_has_documentaccesslevel();
  inline void set_has_selecteddepartments();
  inline void clear_has_selecteddepartments();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch* department_;
  ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch* isadministrator_;
  ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch* documentaccesslevel_;
  ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch* selecteddepartments_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction > actions_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

  void InitAsDefaultInstance();
  static EmployeePermissionsPatch* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeDepartmentPatch : public ::google::protobuf::Message {
 public:
  EmployeeDepartmentPatch();
  virtual ~EmployeeDepartmentPatch();

  EmployeeDepartmentPatch(const EmployeeDepartmentPatch& from);

  inline EmployeeDepartmentPatch& operator=(const EmployeeDepartmentPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeDepartmentPatch& default_instance();

  void Swap(EmployeeDepartmentPatch* other);

  // implements Message ----------------------------------------------

  EmployeeDepartmentPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeDepartmentPatch& from);
  void MergeFrom(const EmployeeDepartmentPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DepartmentId = 1;
  inline bool has_departmentid() const;
  inline void clear_departmentid();
  static const int kDepartmentIdFieldNumber = 1;
  inline const ::std::string& departmentid() const;
  inline void set_departmentid(const ::std::string& value);
  inline void set_departmentid(const char* value);
  inline void set_departmentid(const char* value, size_t size);
  inline ::std::string* mutable_departmentid();
  inline ::std::string* release_departmentid();
  inline void set_allocated_departmentid(::std::string* departmentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
 private:
  inline void set_has_departmentid();
  inline void clear_has_departmentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* departmentid_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeDepartmentPatch* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeIsAdministratorPatch : public ::google::protobuf::Message {
 public:
  EmployeeIsAdministratorPatch();
  virtual ~EmployeeIsAdministratorPatch();

  EmployeeIsAdministratorPatch(const EmployeeIsAdministratorPatch& from);

  inline EmployeeIsAdministratorPatch& operator=(const EmployeeIsAdministratorPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeIsAdministratorPatch& default_instance();

  void Swap(EmployeeIsAdministratorPatch* other);

  // implements Message ----------------------------------------------

  EmployeeIsAdministratorPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeIsAdministratorPatch& from);
  void MergeFrom(const EmployeeIsAdministratorPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsAdministrator = 1;
  inline bool has_isadministrator() const;
  inline void clear_isadministrator();
  static const int kIsAdministratorFieldNumber = 1;
  inline bool isadministrator() const;
  inline void set_isadministrator(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
 private:
  inline void set_has_isadministrator();
  inline void clear_has_isadministrator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isadministrator_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeIsAdministratorPatch* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeDocumentAccessLevelPatch : public ::google::protobuf::Message {
 public:
  EmployeeDocumentAccessLevelPatch();
  virtual ~EmployeeDocumentAccessLevelPatch();

  EmployeeDocumentAccessLevelPatch(const EmployeeDocumentAccessLevelPatch& from);

  inline EmployeeDocumentAccessLevelPatch& operator=(const EmployeeDocumentAccessLevelPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeDocumentAccessLevelPatch& default_instance();

  void Swap(EmployeeDocumentAccessLevelPatch* other);

  // implements Message ----------------------------------------------

  EmployeeDocumentAccessLevelPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeDocumentAccessLevelPatch& from);
  void MergeFrom(const EmployeeDocumentAccessLevelPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 1;
  inline bool has_documentaccesslevel() const;
  inline void clear_documentaccesslevel();
  static const int kDocumentAccessLevelFieldNumber = 1;
  inline ::Diadoc::Api::Proto::DocumentAccessLevel documentaccesslevel() const;
  inline void set_documentaccesslevel(::Diadoc::Api::Proto::DocumentAccessLevel value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
 private:
  inline void set_has_documentaccesslevel();
  inline void clear_has_documentaccesslevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int documentaccesslevel_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeDocumentAccessLevelPatch* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeSelectedDepartmentsPatch : public ::google::protobuf::Message {
 public:
  EmployeeSelectedDepartmentsPatch();
  virtual ~EmployeeSelectedDepartmentsPatch();

  EmployeeSelectedDepartmentsPatch(const EmployeeSelectedDepartmentsPatch& from);

  inline EmployeeSelectedDepartmentsPatch& operator=(const EmployeeSelectedDepartmentsPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeSelectedDepartmentsPatch& default_instance();

  void Swap(EmployeeSelectedDepartmentsPatch* other);

  // implements Message ----------------------------------------------

  EmployeeSelectedDepartmentsPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeSelectedDepartmentsPatch& from);
  void MergeFrom(const EmployeeSelectedDepartmentsPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string SelectedDepartmentIds = 1;
  inline int selecteddepartmentids_size() const;
  inline void clear_selecteddepartmentids();
  static const int kSelectedDepartmentIdsFieldNumber = 1;
  inline const ::std::string& selecteddepartmentids(int index) const;
  inline ::std::string* mutable_selecteddepartmentids(int index);
  inline void set_selecteddepartmentids(int index, const ::std::string& value);
  inline void set_selecteddepartmentids(int index, const char* value);
  inline void set_selecteddepartmentids(int index, const char* value, size_t size);
  inline ::std::string* add_selecteddepartmentids();
  inline void add_selecteddepartmentids(const ::std::string& value);
  inline void add_selecteddepartmentids(const char* value);
  inline void add_selecteddepartmentids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& selecteddepartmentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_selecteddepartmentids();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> selecteddepartmentids_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeSelectedDepartmentsPatch* default_instance_;
};
// -------------------------------------------------------------------

class EmployeePositionPatch : public ::google::protobuf::Message {
 public:
  EmployeePositionPatch();
  virtual ~EmployeePositionPatch();

  EmployeePositionPatch(const EmployeePositionPatch& from);

  inline EmployeePositionPatch& operator=(const EmployeePositionPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeePositionPatch& default_instance();

  void Swap(EmployeePositionPatch* other);

  // implements Message ----------------------------------------------

  EmployeePositionPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeePositionPatch& from);
  void MergeFrom(const EmployeePositionPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
 private:
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* position_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

  void InitAsDefaultInstance();
  static EmployeePositionPatch* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeCanBeInvitedForChatPatch : public ::google::protobuf::Message {
 public:
  EmployeeCanBeInvitedForChatPatch();
  virtual ~EmployeeCanBeInvitedForChatPatch();

  EmployeeCanBeInvitedForChatPatch(const EmployeeCanBeInvitedForChatPatch& from);

  inline EmployeeCanBeInvitedForChatPatch& operator=(const EmployeeCanBeInvitedForChatPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeCanBeInvitedForChatPatch& default_instance();

  void Swap(EmployeeCanBeInvitedForChatPatch* other);

  // implements Message ----------------------------------------------

  EmployeeCanBeInvitedForChatPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeCanBeInvitedForChatPatch& from);
  void MergeFrom(const EmployeeCanBeInvitedForChatPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool CanBeInvitedForChat = 1;
  inline bool has_canbeinvitedforchat() const;
  inline void clear_canbeinvitedforchat();
  static const int kCanBeInvitedForChatFieldNumber = 1;
  inline bool canbeinvitedforchat() const;
  inline void set_canbeinvitedforchat(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
 private:
  inline void set_has_canbeinvitedforchat();
  inline void clear_has_canbeinvitedforchat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool canbeinvitedforchat_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeCanBeInvitedForChatPatch* default_instance_;
};
// ===================================================================


// ===================================================================

// EmployeeToUpdate

// optional .Diadoc.Api.Proto.Employees.EmployeePermissionsPatch Permissions = 1;
inline bool EmployeeToUpdate::has_permissions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeToUpdate::set_has_permissions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeToUpdate::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeToUpdate::clear_permissions() {
  if (permissions_ != NULL) permissions_->::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch::Clear();
  clear_has_permissions();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch& EmployeeToUpdate::permissions() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToUpdate.Permissions)
  return permissions_ != NULL ? *permissions_ : *default_instance_->permissions_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch* EmployeeToUpdate::mutable_permissions() {
  set_has_permissions();
  if (permissions_ == NULL) permissions_ = new ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToUpdate.Permissions)
  return permissions_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch* EmployeeToUpdate::release_permissions() {
  clear_has_permissions();
  ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline void EmployeeToUpdate::set_allocated_permissions(::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch* permissions) {
  delete permissions_;
  permissions_ = permissions;
  if (permissions) {
    set_has_permissions();
  } else {
    clear_has_permissions();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToUpdate.Permissions)
}

// optional .Diadoc.Api.Proto.Employees.EmployeePositionPatch Position = 2;
inline bool EmployeeToUpdate::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeeToUpdate::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeeToUpdate::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeeToUpdate::clear_position() {
  if (position_ != NULL) position_->::Diadoc::Api::Proto::Employees::EmployeePositionPatch::Clear();
  clear_has_position();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeePositionPatch& EmployeeToUpdate::position() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToUpdate.Position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeePositionPatch* EmployeeToUpdate::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Diadoc::Api::Proto::Employees::EmployeePositionPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToUpdate.Position)
  return position_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeePositionPatch* EmployeeToUpdate::release_position() {
  clear_has_position();
  ::Diadoc::Api::Proto::Employees::EmployeePositionPatch* temp = position_;
  position_ = NULL;
  return temp;
}
inline void EmployeeToUpdate::set_allocated_position(::Diadoc::Api::Proto::Employees::EmployeePositionPatch* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToUpdate.Position)
}

// optional .Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch CanBeInvitedForChat = 3;
inline bool EmployeeToUpdate::has_canbeinvitedforchat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmployeeToUpdate::set_has_canbeinvitedforchat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmployeeToUpdate::clear_has_canbeinvitedforchat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmployeeToUpdate::clear_canbeinvitedforchat() {
  if (canbeinvitedforchat_ != NULL) canbeinvitedforchat_->::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch::Clear();
  clear_has_canbeinvitedforchat();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch& EmployeeToUpdate::canbeinvitedforchat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToUpdate.CanBeInvitedForChat)
  return canbeinvitedforchat_ != NULL ? *canbeinvitedforchat_ : *default_instance_->canbeinvitedforchat_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch* EmployeeToUpdate::mutable_canbeinvitedforchat() {
  set_has_canbeinvitedforchat();
  if (canbeinvitedforchat_ == NULL) canbeinvitedforchat_ = new ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToUpdate.CanBeInvitedForChat)
  return canbeinvitedforchat_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch* EmployeeToUpdate::release_canbeinvitedforchat() {
  clear_has_canbeinvitedforchat();
  ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch* temp = canbeinvitedforchat_;
  canbeinvitedforchat_ = NULL;
  return temp;
}
inline void EmployeeToUpdate::set_allocated_canbeinvitedforchat(::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch* canbeinvitedforchat) {
  delete canbeinvitedforchat_;
  canbeinvitedforchat_ = canbeinvitedforchat;
  if (canbeinvitedforchat) {
    set_has_canbeinvitedforchat();
  } else {
    clear_has_canbeinvitedforchat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToUpdate.CanBeInvitedForChat)
}

// -------------------------------------------------------------------

// EmployeePermissionsPatch

// optional .Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch Department = 1;
inline bool EmployeePermissionsPatch::has_department() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeePermissionsPatch::set_has_department() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeePermissionsPatch::clear_has_department() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeePermissionsPatch::clear_department() {
  if (department_ != NULL) department_->::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch::Clear();
  clear_has_department();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch& EmployeePermissionsPatch::department() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.Department)
  return department_ != NULL ? *department_ : *default_instance_->department_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch* EmployeePermissionsPatch::mutable_department() {
  set_has_department();
  if (department_ == NULL) department_ = new ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.Department)
  return department_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch* EmployeePermissionsPatch::release_department() {
  clear_has_department();
  ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch* temp = department_;
  department_ = NULL;
  return temp;
}
inline void EmployeePermissionsPatch::set_allocated_department(::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch* department) {
  delete department_;
  department_ = department;
  if (department) {
    set_has_department();
  } else {
    clear_has_department();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.Department)
}

// optional .Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch IsAdministrator = 2;
inline bool EmployeePermissionsPatch::has_isadministrator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeePermissionsPatch::set_has_isadministrator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeePermissionsPatch::clear_has_isadministrator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeePermissionsPatch::clear_isadministrator() {
  if (isadministrator_ != NULL) isadministrator_->::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch::Clear();
  clear_has_isadministrator();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch& EmployeePermissionsPatch::isadministrator() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.IsAdministrator)
  return isadministrator_ != NULL ? *isadministrator_ : *default_instance_->isadministrator_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch* EmployeePermissionsPatch::mutable_isadministrator() {
  set_has_isadministrator();
  if (isadministrator_ == NULL) isadministrator_ = new ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.IsAdministrator)
  return isadministrator_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch* EmployeePermissionsPatch::release_isadministrator() {
  clear_has_isadministrator();
  ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch* temp = isadministrator_;
  isadministrator_ = NULL;
  return temp;
}
inline void EmployeePermissionsPatch::set_allocated_isadministrator(::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch* isadministrator) {
  delete isadministrator_;
  isadministrator_ = isadministrator;
  if (isadministrator) {
    set_has_isadministrator();
  } else {
    clear_has_isadministrator();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.IsAdministrator)
}

// optional .Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch DocumentAccessLevel = 3;
inline bool EmployeePermissionsPatch::has_documentaccesslevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmployeePermissionsPatch::set_has_documentaccesslevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmployeePermissionsPatch::clear_has_documentaccesslevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmployeePermissionsPatch::clear_documentaccesslevel() {
  if (documentaccesslevel_ != NULL) documentaccesslevel_->::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch::Clear();
  clear_has_documentaccesslevel();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch& EmployeePermissionsPatch::documentaccesslevel() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.DocumentAccessLevel)
  return documentaccesslevel_ != NULL ? *documentaccesslevel_ : *default_instance_->documentaccesslevel_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch* EmployeePermissionsPatch::mutable_documentaccesslevel() {
  set_has_documentaccesslevel();
  if (documentaccesslevel_ == NULL) documentaccesslevel_ = new ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.DocumentAccessLevel)
  return documentaccesslevel_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch* EmployeePermissionsPatch::release_documentaccesslevel() {
  clear_has_documentaccesslevel();
  ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch* temp = documentaccesslevel_;
  documentaccesslevel_ = NULL;
  return temp;
}
inline void EmployeePermissionsPatch::set_allocated_documentaccesslevel(::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch* documentaccesslevel) {
  delete documentaccesslevel_;
  documentaccesslevel_ = documentaccesslevel;
  if (documentaccesslevel) {
    set_has_documentaccesslevel();
  } else {
    clear_has_documentaccesslevel();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.DocumentAccessLevel)
}

// optional .Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch SelectedDepartments = 4;
inline bool EmployeePermissionsPatch::has_selecteddepartments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmployeePermissionsPatch::set_has_selecteddepartments() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmployeePermissionsPatch::clear_has_selecteddepartments() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmployeePermissionsPatch::clear_selecteddepartments() {
  if (selecteddepartments_ != NULL) selecteddepartments_->::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch::Clear();
  clear_has_selecteddepartments();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch& EmployeePermissionsPatch::selecteddepartments() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.SelectedDepartments)
  return selecteddepartments_ != NULL ? *selecteddepartments_ : *default_instance_->selecteddepartments_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch* EmployeePermissionsPatch::mutable_selecteddepartments() {
  set_has_selecteddepartments();
  if (selecteddepartments_ == NULL) selecteddepartments_ = new ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.SelectedDepartments)
  return selecteddepartments_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch* EmployeePermissionsPatch::release_selecteddepartments() {
  clear_has_selecteddepartments();
  ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch* temp = selecteddepartments_;
  selecteddepartments_ = NULL;
  return temp;
}
inline void EmployeePermissionsPatch::set_allocated_selecteddepartments(::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch* selecteddepartments) {
  delete selecteddepartments_;
  selecteddepartments_ = selecteddepartments;
  if (selecteddepartments) {
    set_has_selecteddepartments();
  } else {
    clear_has_selecteddepartments();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.SelectedDepartments)
}

// repeated .Diadoc.Api.Proto.Employees.EmployeeAction Actions = 5;
inline int EmployeePermissionsPatch::actions_size() const {
  return actions_.size();
}
inline void EmployeePermissionsPatch::clear_actions() {
  actions_.Clear();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeAction& EmployeePermissionsPatch::actions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.Actions)
  return actions_.Get(index);
}
inline ::Diadoc::Api::Proto::Employees::EmployeeAction* EmployeePermissionsPatch::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.Actions)
  return actions_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Employees::EmployeeAction* EmployeePermissionsPatch::add_actions() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.Actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction >&
EmployeePermissionsPatch::actions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.Actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction >*
EmployeePermissionsPatch::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch.Actions)
  return &actions_;
}

// -------------------------------------------------------------------

// EmployeeDepartmentPatch

// required string DepartmentId = 1;
inline bool EmployeeDepartmentPatch::has_departmentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeDepartmentPatch::set_has_departmentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeDepartmentPatch::clear_has_departmentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeDepartmentPatch::clear_departmentid() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_->clear();
  }
  clear_has_departmentid();
}
inline const ::std::string& EmployeeDepartmentPatch::departmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch.DepartmentId)
  return *departmentid_;
}
inline void EmployeeDepartmentPatch::set_departmentid(const ::std::string& value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch.DepartmentId)
}
inline void EmployeeDepartmentPatch::set_departmentid(const char* value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch.DepartmentId)
}
inline void EmployeeDepartmentPatch::set_departmentid(const char* value, size_t size) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch.DepartmentId)
}
inline ::std::string* EmployeeDepartmentPatch::mutable_departmentid() {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch.DepartmentId)
  return departmentid_;
}
inline ::std::string* EmployeeDepartmentPatch::release_departmentid() {
  clear_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = departmentid_;
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeeDepartmentPatch::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (departmentid) {
    set_has_departmentid();
    departmentid_ = departmentid;
  } else {
    clear_has_departmentid();
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch.DepartmentId)
}

// -------------------------------------------------------------------

// EmployeeIsAdministratorPatch

// required bool IsAdministrator = 1;
inline bool EmployeeIsAdministratorPatch::has_isadministrator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeIsAdministratorPatch::set_has_isadministrator() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeIsAdministratorPatch::clear_has_isadministrator() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeIsAdministratorPatch::clear_isadministrator() {
  isadministrator_ = false;
  clear_has_isadministrator();
}
inline bool EmployeeIsAdministratorPatch::isadministrator() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch.IsAdministrator)
  return isadministrator_;
}
inline void EmployeeIsAdministratorPatch::set_isadministrator(bool value) {
  set_has_isadministrator();
  isadministrator_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch.IsAdministrator)
}

// -------------------------------------------------------------------

// EmployeeDocumentAccessLevelPatch

// required .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 1;
inline bool EmployeeDocumentAccessLevelPatch::has_documentaccesslevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeDocumentAccessLevelPatch::set_has_documentaccesslevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeDocumentAccessLevelPatch::clear_has_documentaccesslevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeDocumentAccessLevelPatch::clear_documentaccesslevel() {
  documentaccesslevel_ = -1;
  clear_has_documentaccesslevel();
}
inline ::Diadoc::Api::Proto::DocumentAccessLevel EmployeeDocumentAccessLevelPatch::documentaccesslevel() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch.DocumentAccessLevel)
  return static_cast< ::Diadoc::Api::Proto::DocumentAccessLevel >(documentaccesslevel_);
}
inline void EmployeeDocumentAccessLevelPatch::set_documentaccesslevel(::Diadoc::Api::Proto::DocumentAccessLevel value) {
  assert(::Diadoc::Api::Proto::DocumentAccessLevel_IsValid(value));
  set_has_documentaccesslevel();
  documentaccesslevel_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch.DocumentAccessLevel)
}

// -------------------------------------------------------------------

// EmployeeSelectedDepartmentsPatch

// repeated string SelectedDepartmentIds = 1;
inline int EmployeeSelectedDepartmentsPatch::selecteddepartmentids_size() const {
  return selecteddepartmentids_.size();
}
inline void EmployeeSelectedDepartmentsPatch::clear_selecteddepartmentids() {
  selecteddepartmentids_.Clear();
}
inline const ::std::string& EmployeeSelectedDepartmentsPatch::selecteddepartmentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
  return selecteddepartmentids_.Get(index);
}
inline ::std::string* EmployeeSelectedDepartmentsPatch::mutable_selecteddepartmentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
  return selecteddepartmentids_.Mutable(index);
}
inline void EmployeeSelectedDepartmentsPatch::set_selecteddepartmentids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
  selecteddepartmentids_.Mutable(index)->assign(value);
}
inline void EmployeeSelectedDepartmentsPatch::set_selecteddepartmentids(int index, const char* value) {
  selecteddepartmentids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
}
inline void EmployeeSelectedDepartmentsPatch::set_selecteddepartmentids(int index, const char* value, size_t size) {
  selecteddepartmentids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
}
inline ::std::string* EmployeeSelectedDepartmentsPatch::add_selecteddepartmentids() {
  return selecteddepartmentids_.Add();
}
inline void EmployeeSelectedDepartmentsPatch::add_selecteddepartmentids(const ::std::string& value) {
  selecteddepartmentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
}
inline void EmployeeSelectedDepartmentsPatch::add_selecteddepartmentids(const char* value) {
  selecteddepartmentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
}
inline void EmployeeSelectedDepartmentsPatch::add_selecteddepartmentids(const char* value, size_t size) {
  selecteddepartmentids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EmployeeSelectedDepartmentsPatch::selecteddepartmentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
  return selecteddepartmentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EmployeeSelectedDepartmentsPatch::mutable_selecteddepartmentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch.SelectedDepartmentIds)
  return &selecteddepartmentids_;
}

// -------------------------------------------------------------------

// EmployeePositionPatch

// optional string Position = 1;
inline bool EmployeePositionPatch::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeePositionPatch::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeePositionPatch::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeePositionPatch::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& EmployeePositionPatch::position() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePositionPatch.Position)
  return *position_;
}
inline void EmployeePositionPatch::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeePositionPatch.Position)
}
inline void EmployeePositionPatch::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeePositionPatch.Position)
}
inline void EmployeePositionPatch::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeePositionPatch.Position)
}
inline ::std::string* EmployeePositionPatch::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePositionPatch.Position)
  return position_;
}
inline ::std::string* EmployeePositionPatch::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeePositionPatch::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeePositionPatch.Position)
}

// -------------------------------------------------------------------

// EmployeeCanBeInvitedForChatPatch

// required bool CanBeInvitedForChat = 1;
inline bool EmployeeCanBeInvitedForChatPatch::has_canbeinvitedforchat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeCanBeInvitedForChatPatch::set_has_canbeinvitedforchat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeCanBeInvitedForChatPatch::clear_has_canbeinvitedforchat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeCanBeInvitedForChatPatch::clear_canbeinvitedforchat() {
  canbeinvitedforchat_ = false;
  clear_has_canbeinvitedforchat();
}
inline bool EmployeeCanBeInvitedForChatPatch::canbeinvitedforchat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch.CanBeInvitedForChat)
  return canbeinvitedforchat_;
}
inline void EmployeeCanBeInvitedForChatPatch::set_canbeinvitedforchat(bool value) {
  set_has_canbeinvitedforchat();
  canbeinvitedforchat_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch.CanBeInvitedForChat)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Employees
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Employees_2fEmployeeToUpdate_2eproto__INCLUDED
