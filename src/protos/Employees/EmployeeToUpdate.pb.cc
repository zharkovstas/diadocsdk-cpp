// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Employees/EmployeeToUpdate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Employees/EmployeeToUpdate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Employees {

namespace {

const ::google::protobuf::Descriptor* EmployeeToUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeToUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeePermissionsPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeePermissionsPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeDepartmentPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeDepartmentPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeIsAdministratorPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeIsAdministratorPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeDocumentAccessLevelPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeDocumentAccessLevelPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeSelectedDepartmentsPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeSelectedDepartmentsPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeePositionPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeePositionPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeCanBeInvitedForChatPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeCanBeInvitedForChatPatch_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto() {
  protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Employees/EmployeeToUpdate.proto");
  GOOGLE_CHECK(file != NULL);
  EmployeeToUpdate_descriptor_ = file->message_type(0);
  static const int EmployeeToUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToUpdate, permissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToUpdate, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToUpdate, canbeinvitedforchat_),
  };
  EmployeeToUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeToUpdate_descriptor_,
      EmployeeToUpdate::default_instance_,
      EmployeeToUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeToUpdate));
  EmployeePermissionsPatch_descriptor_ = file->message_type(1);
  static const int EmployeePermissionsPatch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePermissionsPatch, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePermissionsPatch, isadministrator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePermissionsPatch, documentaccesslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePermissionsPatch, selecteddepartments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePermissionsPatch, actions_),
  };
  EmployeePermissionsPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeePermissionsPatch_descriptor_,
      EmployeePermissionsPatch::default_instance_,
      EmployeePermissionsPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePermissionsPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePermissionsPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeePermissionsPatch));
  EmployeeDepartmentPatch_descriptor_ = file->message_type(2);
  static const int EmployeeDepartmentPatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeDepartmentPatch, departmentid_),
  };
  EmployeeDepartmentPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeDepartmentPatch_descriptor_,
      EmployeeDepartmentPatch::default_instance_,
      EmployeeDepartmentPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeDepartmentPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeDepartmentPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeDepartmentPatch));
  EmployeeIsAdministratorPatch_descriptor_ = file->message_type(3);
  static const int EmployeeIsAdministratorPatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeIsAdministratorPatch, isadministrator_),
  };
  EmployeeIsAdministratorPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeIsAdministratorPatch_descriptor_,
      EmployeeIsAdministratorPatch::default_instance_,
      EmployeeIsAdministratorPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeIsAdministratorPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeIsAdministratorPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeIsAdministratorPatch));
  EmployeeDocumentAccessLevelPatch_descriptor_ = file->message_type(4);
  static const int EmployeeDocumentAccessLevelPatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeDocumentAccessLevelPatch, documentaccesslevel_),
  };
  EmployeeDocumentAccessLevelPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeDocumentAccessLevelPatch_descriptor_,
      EmployeeDocumentAccessLevelPatch::default_instance_,
      EmployeeDocumentAccessLevelPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeDocumentAccessLevelPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeDocumentAccessLevelPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeDocumentAccessLevelPatch));
  EmployeeSelectedDepartmentsPatch_descriptor_ = file->message_type(5);
  static const int EmployeeSelectedDepartmentsPatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeSelectedDepartmentsPatch, selecteddepartmentids_),
  };
  EmployeeSelectedDepartmentsPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeSelectedDepartmentsPatch_descriptor_,
      EmployeeSelectedDepartmentsPatch::default_instance_,
      EmployeeSelectedDepartmentsPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeSelectedDepartmentsPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeSelectedDepartmentsPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeSelectedDepartmentsPatch));
  EmployeePositionPatch_descriptor_ = file->message_type(6);
  static const int EmployeePositionPatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePositionPatch, position_),
  };
  EmployeePositionPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeePositionPatch_descriptor_,
      EmployeePositionPatch::default_instance_,
      EmployeePositionPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePositionPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeePositionPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeePositionPatch));
  EmployeeCanBeInvitedForChatPatch_descriptor_ = file->message_type(7);
  static const int EmployeeCanBeInvitedForChatPatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeCanBeInvitedForChatPatch, canbeinvitedforchat_),
  };
  EmployeeCanBeInvitedForChatPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeCanBeInvitedForChatPatch_descriptor_,
      EmployeeCanBeInvitedForChatPatch::default_instance_,
      EmployeeCanBeInvitedForChatPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeCanBeInvitedForChatPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeCanBeInvitedForChatPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeCanBeInvitedForChatPatch));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Employees_2fEmployeeToUpdate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeToUpdate_descriptor_, &EmployeeToUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeePermissionsPatch_descriptor_, &EmployeePermissionsPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeDepartmentPatch_descriptor_, &EmployeeDepartmentPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeIsAdministratorPatch_descriptor_, &EmployeeIsAdministratorPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeDocumentAccessLevelPatch_descriptor_, &EmployeeDocumentAccessLevelPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeSelectedDepartmentsPatch_descriptor_, &EmployeeSelectedDepartmentsPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeePositionPatch_descriptor_, &EmployeePositionPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeCanBeInvitedForChatPatch_descriptor_, &EmployeeCanBeInvitedForChatPatch::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto() {
  delete EmployeeToUpdate::default_instance_;
  delete EmployeeToUpdate_reflection_;
  delete EmployeePermissionsPatch::default_instance_;
  delete EmployeePermissionsPatch_reflection_;
  delete EmployeeDepartmentPatch::default_instance_;
  delete EmployeeDepartmentPatch_reflection_;
  delete EmployeeIsAdministratorPatch::default_instance_;
  delete EmployeeIsAdministratorPatch_reflection_;
  delete EmployeeDocumentAccessLevelPatch::default_instance_;
  delete EmployeeDocumentAccessLevelPatch_reflection_;
  delete EmployeeSelectedDepartmentsPatch::default_instance_;
  delete EmployeeSelectedDepartmentsPatch_reflection_;
  delete EmployeePositionPatch::default_instance_;
  delete EmployeePositionPatch_reflection_;
  delete EmployeeCanBeInvitedForChatPatch::default_instance_;
  delete EmployeeCanBeInvitedForChatPatch_reflection_;
}

void protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Employees::protobuf_AddDesc_Employees_2fEmployee_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_OrganizationUserPermissions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n Employees/EmployeeToUpdate.proto\022\032Diad"
    "oc.Api.Proto.Employees\032\030Employees/Employ"
    "ee.proto\032!OrganizationUserPermissions.pr"
    "oto\"\375\001\n\020EmployeeToUpdate\022I\n\013Permissions\030"
    "\001 \001(\01324.Diadoc.Api.Proto.Employees.Emplo"
    "yeePermissionsPatch\022C\n\010Position\030\002 \001(\01321."
    "Diadoc.Api.Proto.Employees.EmployeePosit"
    "ionPatch\022Y\n\023CanBeInvitedForChat\030\003 \001(\0132<."
    "Diadoc.Api.Proto.Employees.EmployeeCanBe"
    "InvitedForChatPatch\"\251\003\n\030EmployeePermissi"
    "onsPatch\022G\n\nDepartment\030\001 \001(\01323.Diadoc.Ap"
    "i.Proto.Employees.EmployeeDepartmentPatc"
    "h\022Q\n\017IsAdministrator\030\002 \001(\01328.Diadoc.Api."
    "Proto.Employees.EmployeeIsAdministratorP"
    "atch\022Y\n\023DocumentAccessLevel\030\003 \001(\0132<.Diad"
    "oc.Api.Proto.Employees.EmployeeDocumentA"
    "ccessLevelPatch\022Y\n\023SelectedDepartments\030\004"
    " \001(\0132<.Diadoc.Api.Proto.Employees.Employ"
    "eeSelectedDepartmentsPatch\022;\n\007Actions\030\005 "
    "\003(\0132*.Diadoc.Api.Proto.Employees.Employe"
    "eAction\"/\n\027EmployeeDepartmentPatch\022\024\n\014De"
    "partmentId\030\001 \002(\t\"7\n\034EmployeeIsAdministra"
    "torPatch\022\027\n\017IsAdministrator\030\001 \002(\010\"f\n Emp"
    "loyeeDocumentAccessLevelPatch\022B\n\023Documen"
    "tAccessLevel\030\001 \002(\0162%.Diadoc.Api.Proto.Do"
    "cumentAccessLevel\"A\n EmployeeSelectedDep"
    "artmentsPatch\022\035\n\025SelectedDepartmentIds\030\001"
    " \003(\t\")\n\025EmployeePositionPatch\022\020\n\010Positio"
    "n\030\001 \001(\t\"\?\n EmployeeCanBeInvitedForChatPa"
    "tch\022\033\n\023CanBeInvitedForChat\030\001 \002(\010", 1192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Employees/EmployeeToUpdate.proto", &protobuf_RegisterTypes);
  EmployeeToUpdate::default_instance_ = new EmployeeToUpdate();
  EmployeePermissionsPatch::default_instance_ = new EmployeePermissionsPatch();
  EmployeeDepartmentPatch::default_instance_ = new EmployeeDepartmentPatch();
  EmployeeIsAdministratorPatch::default_instance_ = new EmployeeIsAdministratorPatch();
  EmployeeDocumentAccessLevelPatch::default_instance_ = new EmployeeDocumentAccessLevelPatch();
  EmployeeSelectedDepartmentsPatch::default_instance_ = new EmployeeSelectedDepartmentsPatch();
  EmployeePositionPatch::default_instance_ = new EmployeePositionPatch();
  EmployeeCanBeInvitedForChatPatch::default_instance_ = new EmployeeCanBeInvitedForChatPatch();
  EmployeeToUpdate::default_instance_->InitAsDefaultInstance();
  EmployeePermissionsPatch::default_instance_->InitAsDefaultInstance();
  EmployeeDepartmentPatch::default_instance_->InitAsDefaultInstance();
  EmployeeIsAdministratorPatch::default_instance_->InitAsDefaultInstance();
  EmployeeDocumentAccessLevelPatch::default_instance_->InitAsDefaultInstance();
  EmployeeSelectedDepartmentsPatch::default_instance_->InitAsDefaultInstance();
  EmployeePositionPatch::default_instance_->InitAsDefaultInstance();
  EmployeeCanBeInvitedForChatPatch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Employees_2fEmployeeToUpdate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Employees_2fEmployeeToUpdate_2eproto {
  StaticDescriptorInitializer_Employees_2fEmployeeToUpdate_2eproto() {
    protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  }
} static_descriptor_initializer_Employees_2fEmployeeToUpdate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EmployeeToUpdate::kPermissionsFieldNumber;
const int EmployeeToUpdate::kPositionFieldNumber;
const int EmployeeToUpdate::kCanBeInvitedForChatFieldNumber;
#endif  // !_MSC_VER

EmployeeToUpdate::EmployeeToUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
}

void EmployeeToUpdate::InitAsDefaultInstance() {
  permissions_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch*>(&::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch::default_instance());
  position_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeePositionPatch*>(&::Diadoc::Api::Proto::Employees::EmployeePositionPatch::default_instance());
  canbeinvitedforchat_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch*>(&::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch::default_instance());
}

EmployeeToUpdate::EmployeeToUpdate(const EmployeeToUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
}

void EmployeeToUpdate::SharedCtor() {
  _cached_size_ = 0;
  permissions_ = NULL;
  position_ = NULL;
  canbeinvitedforchat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeToUpdate::~EmployeeToUpdate() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
  SharedDtor();
}

void EmployeeToUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete permissions_;
    delete position_;
    delete canbeinvitedforchat_;
  }
}

void EmployeeToUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeToUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeToUpdate_descriptor_;
}

const EmployeeToUpdate& EmployeeToUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  return *default_instance_;
}

EmployeeToUpdate* EmployeeToUpdate::default_instance_ = NULL;

EmployeeToUpdate* EmployeeToUpdate::New() const {
  return new EmployeeToUpdate;
}

void EmployeeToUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_permissions()) {
      if (permissions_ != NULL) permissions_->::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Diadoc::Api::Proto::Employees::EmployeePositionPatch::Clear();
    }
    if (has_canbeinvitedforchat()) {
      if (canbeinvitedforchat_ != NULL) canbeinvitedforchat_->::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeToUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Employees.EmployeePermissionsPatch Permissions = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permissions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // optional .Diadoc.Api.Proto.Employees.EmployeePositionPatch Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CanBeInvitedForChat;
        break;
      }

      // optional .Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch CanBeInvitedForChat = 3;
      case 3: {
        if (tag == 26) {
         parse_CanBeInvitedForChat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canbeinvitedforchat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
  return false;
#undef DO_
}

void EmployeeToUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
  // optional .Diadoc.Api.Proto.Employees.EmployeePermissionsPatch Permissions = 1;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->permissions(), output);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeePositionPatch Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch CanBeInvitedForChat = 3;
  if (has_canbeinvitedforchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->canbeinvitedforchat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
}

::google::protobuf::uint8* EmployeeToUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
  // optional .Diadoc.Api.Proto.Employees.EmployeePermissionsPatch Permissions = 1;
  if (has_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->permissions(), target);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeePositionPatch Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch CanBeInvitedForChat = 3;
  if (has_canbeinvitedforchat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->canbeinvitedforchat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeToUpdate)
  return target;
}

int EmployeeToUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Employees.EmployeePermissionsPatch Permissions = 1;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permissions());
    }

    // optional .Diadoc.Api.Proto.Employees.EmployeePositionPatch Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch CanBeInvitedForChat = 3;
    if (has_canbeinvitedforchat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->canbeinvitedforchat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeToUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeToUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeToUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeToUpdate::MergeFrom(const EmployeeToUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_permissions()) {
      mutable_permissions()->::Diadoc::Api::Proto::Employees::EmployeePermissionsPatch::MergeFrom(from.permissions());
    }
    if (from.has_position()) {
      mutable_position()->::Diadoc::Api::Proto::Employees::EmployeePositionPatch::MergeFrom(from.position());
    }
    if (from.has_canbeinvitedforchat()) {
      mutable_canbeinvitedforchat()->::Diadoc::Api::Proto::Employees::EmployeeCanBeInvitedForChatPatch::MergeFrom(from.canbeinvitedforchat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeToUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeToUpdate::CopyFrom(const EmployeeToUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeToUpdate::IsInitialized() const {

  if (has_permissions()) {
    if (!this->permissions().IsInitialized()) return false;
  }
  if (has_canbeinvitedforchat()) {
    if (!this->canbeinvitedforchat().IsInitialized()) return false;
  }
  return true;
}

void EmployeeToUpdate::Swap(EmployeeToUpdate* other) {
  if (other != this) {
    std::swap(permissions_, other->permissions_);
    std::swap(position_, other->position_);
    std::swap(canbeinvitedforchat_, other->canbeinvitedforchat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeToUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeToUpdate_descriptor_;
  metadata.reflection = EmployeeToUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeePermissionsPatch::kDepartmentFieldNumber;
const int EmployeePermissionsPatch::kIsAdministratorFieldNumber;
const int EmployeePermissionsPatch::kDocumentAccessLevelFieldNumber;
const int EmployeePermissionsPatch::kSelectedDepartmentsFieldNumber;
const int EmployeePermissionsPatch::kActionsFieldNumber;
#endif  // !_MSC_VER

EmployeePermissionsPatch::EmployeePermissionsPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
}

void EmployeePermissionsPatch::InitAsDefaultInstance() {
  department_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch*>(&::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch::default_instance());
  isadministrator_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch*>(&::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch::default_instance());
  documentaccesslevel_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch*>(&::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch::default_instance());
  selecteddepartments_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch*>(&::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch::default_instance());
}

EmployeePermissionsPatch::EmployeePermissionsPatch(const EmployeePermissionsPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
}

void EmployeePermissionsPatch::SharedCtor() {
  _cached_size_ = 0;
  department_ = NULL;
  isadministrator_ = NULL;
  documentaccesslevel_ = NULL;
  selecteddepartments_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeePermissionsPatch::~EmployeePermissionsPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
  SharedDtor();
}

void EmployeePermissionsPatch::SharedDtor() {
  if (this != default_instance_) {
    delete department_;
    delete isadministrator_;
    delete documentaccesslevel_;
    delete selecteddepartments_;
  }
}

void EmployeePermissionsPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeePermissionsPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeePermissionsPatch_descriptor_;
}

const EmployeePermissionsPatch& EmployeePermissionsPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  return *default_instance_;
}

EmployeePermissionsPatch* EmployeePermissionsPatch::default_instance_ = NULL;

EmployeePermissionsPatch* EmployeePermissionsPatch::New() const {
  return new EmployeePermissionsPatch;
}

void EmployeePermissionsPatch::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_department()) {
      if (department_ != NULL) department_->::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch::Clear();
    }
    if (has_isadministrator()) {
      if (isadministrator_ != NULL) isadministrator_->::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch::Clear();
    }
    if (has_documentaccesslevel()) {
      if (documentaccesslevel_ != NULL) documentaccesslevel_->::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch::Clear();
    }
    if (has_selecteddepartments()) {
      if (selecteddepartments_ != NULL) selecteddepartments_->::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch::Clear();
    }
  }
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeePermissionsPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch Department = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_department()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IsAdministrator;
        break;
      }

      // optional .Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch IsAdministrator = 2;
      case 2: {
        if (tag == 18) {
         parse_IsAdministrator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_isadministrator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentAccessLevel;
        break;
      }

      // optional .Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch DocumentAccessLevel = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentAccessLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentaccesslevel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SelectedDepartments;
        break;
      }

      // optional .Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch SelectedDepartments = 4;
      case 4: {
        if (tag == 34) {
         parse_SelectedDepartments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selecteddepartments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Actions;
        break;
      }

      // repeated .Diadoc.Api.Proto.Employees.EmployeeAction Actions = 5;
      case 5: {
        if (tag == 42) {
         parse_Actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Actions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
  return false;
#undef DO_
}

void EmployeePermissionsPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
  // optional .Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch Department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->department(), output);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch IsAdministrator = 2;
  if (has_isadministrator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->isadministrator(), output);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch DocumentAccessLevel = 3;
  if (has_documentaccesslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documentaccesslevel(), output);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch SelectedDepartments = 4;
  if (has_selecteddepartments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selecteddepartments(), output);
  }

  // repeated .Diadoc.Api.Proto.Employees.EmployeeAction Actions = 5;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->actions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
}

::google::protobuf::uint8* EmployeePermissionsPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
  // optional .Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch Department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->department(), target);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch IsAdministrator = 2;
  if (has_isadministrator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->isadministrator(), target);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch DocumentAccessLevel = 3;
  if (has_documentaccesslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documentaccesslevel(), target);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch SelectedDepartments = 4;
  if (has_selecteddepartments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selecteddepartments(), target);
  }

  // repeated .Diadoc.Api.Proto.Employees.EmployeeAction Actions = 5;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->actions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeePermissionsPatch)
  return target;
}

int EmployeePermissionsPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch Department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->department());
    }

    // optional .Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch IsAdministrator = 2;
    if (has_isadministrator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->isadministrator());
    }

    // optional .Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch DocumentAccessLevel = 3;
    if (has_documentaccesslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentaccesslevel());
    }

    // optional .Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch SelectedDepartments = 4;
    if (has_selecteddepartments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selecteddepartments());
    }

  }
  // repeated .Diadoc.Api.Proto.Employees.EmployeeAction Actions = 5;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeePermissionsPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeePermissionsPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeePermissionsPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeePermissionsPatch::MergeFrom(const EmployeePermissionsPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      mutable_department()->::Diadoc::Api::Proto::Employees::EmployeeDepartmentPatch::MergeFrom(from.department());
    }
    if (from.has_isadministrator()) {
      mutable_isadministrator()->::Diadoc::Api::Proto::Employees::EmployeeIsAdministratorPatch::MergeFrom(from.isadministrator());
    }
    if (from.has_documentaccesslevel()) {
      mutable_documentaccesslevel()->::Diadoc::Api::Proto::Employees::EmployeeDocumentAccessLevelPatch::MergeFrom(from.documentaccesslevel());
    }
    if (from.has_selecteddepartments()) {
      mutable_selecteddepartments()->::Diadoc::Api::Proto::Employees::EmployeeSelectedDepartmentsPatch::MergeFrom(from.selecteddepartments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeePermissionsPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeePermissionsPatch::CopyFrom(const EmployeePermissionsPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeePermissionsPatch::IsInitialized() const {

  if (has_department()) {
    if (!this->department().IsInitialized()) return false;
  }
  if (has_isadministrator()) {
    if (!this->isadministrator().IsInitialized()) return false;
  }
  if (has_documentaccesslevel()) {
    if (!this->documentaccesslevel().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->actions())) return false;
  return true;
}

void EmployeePermissionsPatch::Swap(EmployeePermissionsPatch* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(isadministrator_, other->isadministrator_);
    std::swap(documentaccesslevel_, other->documentaccesslevel_);
    std::swap(selecteddepartments_, other->selecteddepartments_);
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeePermissionsPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeePermissionsPatch_descriptor_;
  metadata.reflection = EmployeePermissionsPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeDepartmentPatch::kDepartmentIdFieldNumber;
#endif  // !_MSC_VER

EmployeeDepartmentPatch::EmployeeDepartmentPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
}

void EmployeeDepartmentPatch::InitAsDefaultInstance() {
}

EmployeeDepartmentPatch::EmployeeDepartmentPatch(const EmployeeDepartmentPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
}

void EmployeeDepartmentPatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeDepartmentPatch::~EmployeeDepartmentPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
  SharedDtor();
}

void EmployeeDepartmentPatch::SharedDtor() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (this != default_instance_) {
  }
}

void EmployeeDepartmentPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeDepartmentPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeDepartmentPatch_descriptor_;
}

const EmployeeDepartmentPatch& EmployeeDepartmentPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  return *default_instance_;
}

EmployeeDepartmentPatch* EmployeeDepartmentPatch::default_instance_ = NULL;

EmployeeDepartmentPatch* EmployeeDepartmentPatch::New() const {
  return new EmployeeDepartmentPatch;
}

void EmployeeDepartmentPatch::Clear() {
  if (has_departmentid()) {
    if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      departmentid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeDepartmentPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DepartmentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->departmentid().data(), this->departmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "departmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
  return false;
#undef DO_
}

void EmployeeDepartmentPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
  // required string DepartmentId = 1;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "departmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->departmentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
}

::google::protobuf::uint8* EmployeeDepartmentPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
  // required string DepartmentId = 1;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "departmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->departmentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeDepartmentPatch)
  return target;
}

int EmployeeDepartmentPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DepartmentId = 1;
    if (has_departmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departmentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeDepartmentPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeDepartmentPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeDepartmentPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeDepartmentPatch::MergeFrom(const EmployeeDepartmentPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_departmentid()) {
      set_departmentid(from.departmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeDepartmentPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeDepartmentPatch::CopyFrom(const EmployeeDepartmentPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeDepartmentPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EmployeeDepartmentPatch::Swap(EmployeeDepartmentPatch* other) {
  if (other != this) {
    std::swap(departmentid_, other->departmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeDepartmentPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeDepartmentPatch_descriptor_;
  metadata.reflection = EmployeeDepartmentPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeIsAdministratorPatch::kIsAdministratorFieldNumber;
#endif  // !_MSC_VER

EmployeeIsAdministratorPatch::EmployeeIsAdministratorPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
}

void EmployeeIsAdministratorPatch::InitAsDefaultInstance() {
}

EmployeeIsAdministratorPatch::EmployeeIsAdministratorPatch(const EmployeeIsAdministratorPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
}

void EmployeeIsAdministratorPatch::SharedCtor() {
  _cached_size_ = 0;
  isadministrator_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeIsAdministratorPatch::~EmployeeIsAdministratorPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
  SharedDtor();
}

void EmployeeIsAdministratorPatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmployeeIsAdministratorPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeIsAdministratorPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeIsAdministratorPatch_descriptor_;
}

const EmployeeIsAdministratorPatch& EmployeeIsAdministratorPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  return *default_instance_;
}

EmployeeIsAdministratorPatch* EmployeeIsAdministratorPatch::default_instance_ = NULL;

EmployeeIsAdministratorPatch* EmployeeIsAdministratorPatch::New() const {
  return new EmployeeIsAdministratorPatch;
}

void EmployeeIsAdministratorPatch::Clear() {
  isadministrator_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeIsAdministratorPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsAdministrator = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadministrator_)));
          set_has_isadministrator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
  return false;
#undef DO_
}

void EmployeeIsAdministratorPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
  // required bool IsAdministrator = 1;
  if (has_isadministrator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isadministrator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
}

::google::protobuf::uint8* EmployeeIsAdministratorPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
  // required bool IsAdministrator = 1;
  if (has_isadministrator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isadministrator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeIsAdministratorPatch)
  return target;
}

int EmployeeIsAdministratorPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsAdministrator = 1;
    if (has_isadministrator()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeIsAdministratorPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeIsAdministratorPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeIsAdministratorPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeIsAdministratorPatch::MergeFrom(const EmployeeIsAdministratorPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isadministrator()) {
      set_isadministrator(from.isadministrator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeIsAdministratorPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeIsAdministratorPatch::CopyFrom(const EmployeeIsAdministratorPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeIsAdministratorPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EmployeeIsAdministratorPatch::Swap(EmployeeIsAdministratorPatch* other) {
  if (other != this) {
    std::swap(isadministrator_, other->isadministrator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeIsAdministratorPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeIsAdministratorPatch_descriptor_;
  metadata.reflection = EmployeeIsAdministratorPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeDocumentAccessLevelPatch::kDocumentAccessLevelFieldNumber;
#endif  // !_MSC_VER

EmployeeDocumentAccessLevelPatch::EmployeeDocumentAccessLevelPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
}

void EmployeeDocumentAccessLevelPatch::InitAsDefaultInstance() {
}

EmployeeDocumentAccessLevelPatch::EmployeeDocumentAccessLevelPatch(const EmployeeDocumentAccessLevelPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
}

void EmployeeDocumentAccessLevelPatch::SharedCtor() {
  _cached_size_ = 0;
  documentaccesslevel_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeDocumentAccessLevelPatch::~EmployeeDocumentAccessLevelPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
  SharedDtor();
}

void EmployeeDocumentAccessLevelPatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmployeeDocumentAccessLevelPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeDocumentAccessLevelPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeDocumentAccessLevelPatch_descriptor_;
}

const EmployeeDocumentAccessLevelPatch& EmployeeDocumentAccessLevelPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  return *default_instance_;
}

EmployeeDocumentAccessLevelPatch* EmployeeDocumentAccessLevelPatch::default_instance_ = NULL;

EmployeeDocumentAccessLevelPatch* EmployeeDocumentAccessLevelPatch::New() const {
  return new EmployeeDocumentAccessLevelPatch;
}

void EmployeeDocumentAccessLevelPatch::Clear() {
  documentaccesslevel_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeDocumentAccessLevelPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::DocumentAccessLevel_IsValid(value)) {
            set_documentaccesslevel(static_cast< ::Diadoc::Api::Proto::DocumentAccessLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
  return false;
#undef DO_
}

void EmployeeDocumentAccessLevelPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
  // required .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 1;
  if (has_documentaccesslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->documentaccesslevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
}

::google::protobuf::uint8* EmployeeDocumentAccessLevelPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
  // required .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 1;
  if (has_documentaccesslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->documentaccesslevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeDocumentAccessLevelPatch)
  return target;
}

int EmployeeDocumentAccessLevelPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 1;
    if (has_documentaccesslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documentaccesslevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeDocumentAccessLevelPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeDocumentAccessLevelPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeDocumentAccessLevelPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeDocumentAccessLevelPatch::MergeFrom(const EmployeeDocumentAccessLevelPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentaccesslevel()) {
      set_documentaccesslevel(from.documentaccesslevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeDocumentAccessLevelPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeDocumentAccessLevelPatch::CopyFrom(const EmployeeDocumentAccessLevelPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeDocumentAccessLevelPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EmployeeDocumentAccessLevelPatch::Swap(EmployeeDocumentAccessLevelPatch* other) {
  if (other != this) {
    std::swap(documentaccesslevel_, other->documentaccesslevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeDocumentAccessLevelPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeDocumentAccessLevelPatch_descriptor_;
  metadata.reflection = EmployeeDocumentAccessLevelPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeSelectedDepartmentsPatch::kSelectedDepartmentIdsFieldNumber;
#endif  // !_MSC_VER

EmployeeSelectedDepartmentsPatch::EmployeeSelectedDepartmentsPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
}

void EmployeeSelectedDepartmentsPatch::InitAsDefaultInstance() {
}

EmployeeSelectedDepartmentsPatch::EmployeeSelectedDepartmentsPatch(const EmployeeSelectedDepartmentsPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
}

void EmployeeSelectedDepartmentsPatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeSelectedDepartmentsPatch::~EmployeeSelectedDepartmentsPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
  SharedDtor();
}

void EmployeeSelectedDepartmentsPatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmployeeSelectedDepartmentsPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeSelectedDepartmentsPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeSelectedDepartmentsPatch_descriptor_;
}

const EmployeeSelectedDepartmentsPatch& EmployeeSelectedDepartmentsPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  return *default_instance_;
}

EmployeeSelectedDepartmentsPatch* EmployeeSelectedDepartmentsPatch::default_instance_ = NULL;

EmployeeSelectedDepartmentsPatch* EmployeeSelectedDepartmentsPatch::New() const {
  return new EmployeeSelectedDepartmentsPatch;
}

void EmployeeSelectedDepartmentsPatch::Clear() {
  selecteddepartmentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeSelectedDepartmentsPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string SelectedDepartmentIds = 1;
      case 1: {
        if (tag == 10) {
         parse_SelectedDepartmentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_selecteddepartmentids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->selecteddepartmentids(this->selecteddepartmentids_size() - 1).data(),
            this->selecteddepartmentids(this->selecteddepartmentids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "selecteddepartmentids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SelectedDepartmentIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
  return false;
#undef DO_
}

void EmployeeSelectedDepartmentsPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
  // repeated string SelectedDepartmentIds = 1;
  for (int i = 0; i < this->selecteddepartmentids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->selecteddepartmentids(i).data(), this->selecteddepartmentids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "selecteddepartmentids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->selecteddepartmentids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
}

::google::protobuf::uint8* EmployeeSelectedDepartmentsPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
  // repeated string SelectedDepartmentIds = 1;
  for (int i = 0; i < this->selecteddepartmentids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selecteddepartmentids(i).data(), this->selecteddepartmentids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "selecteddepartmentids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->selecteddepartmentids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeSelectedDepartmentsPatch)
  return target;
}

int EmployeeSelectedDepartmentsPatch::ByteSize() const {
  int total_size = 0;

  // repeated string SelectedDepartmentIds = 1;
  total_size += 1 * this->selecteddepartmentids_size();
  for (int i = 0; i < this->selecteddepartmentids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->selecteddepartmentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeSelectedDepartmentsPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeSelectedDepartmentsPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeSelectedDepartmentsPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeSelectedDepartmentsPatch::MergeFrom(const EmployeeSelectedDepartmentsPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  selecteddepartmentids_.MergeFrom(from.selecteddepartmentids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeSelectedDepartmentsPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeSelectedDepartmentsPatch::CopyFrom(const EmployeeSelectedDepartmentsPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeSelectedDepartmentsPatch::IsInitialized() const {

  return true;
}

void EmployeeSelectedDepartmentsPatch::Swap(EmployeeSelectedDepartmentsPatch* other) {
  if (other != this) {
    selecteddepartmentids_.Swap(&other->selecteddepartmentids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeSelectedDepartmentsPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeSelectedDepartmentsPatch_descriptor_;
  metadata.reflection = EmployeeSelectedDepartmentsPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeePositionPatch::kPositionFieldNumber;
#endif  // !_MSC_VER

EmployeePositionPatch::EmployeePositionPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
}

void EmployeePositionPatch::InitAsDefaultInstance() {
}

EmployeePositionPatch::EmployeePositionPatch(const EmployeePositionPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
}

void EmployeePositionPatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeePositionPatch::~EmployeePositionPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
  SharedDtor();
}

void EmployeePositionPatch::SharedDtor() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (this != default_instance_) {
  }
}

void EmployeePositionPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeePositionPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeePositionPatch_descriptor_;
}

const EmployeePositionPatch& EmployeePositionPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  return *default_instance_;
}

EmployeePositionPatch* EmployeePositionPatch::default_instance_ = NULL;

EmployeePositionPatch* EmployeePositionPatch::New() const {
  return new EmployeePositionPatch;
}

void EmployeePositionPatch::Clear() {
  if (has_position()) {
    if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      position_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeePositionPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
  return false;
#undef DO_
}

void EmployeePositionPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
  // optional string Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
}

::google::protobuf::uint8* EmployeePositionPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
  // optional string Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeePositionPatch)
  return target;
}

int EmployeePositionPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeePositionPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeePositionPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeePositionPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeePositionPatch::MergeFrom(const EmployeePositionPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeePositionPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeePositionPatch::CopyFrom(const EmployeePositionPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeePositionPatch::IsInitialized() const {

  return true;
}

void EmployeePositionPatch::Swap(EmployeePositionPatch* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeePositionPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeePositionPatch_descriptor_;
  metadata.reflection = EmployeePositionPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeCanBeInvitedForChatPatch::kCanBeInvitedForChatFieldNumber;
#endif  // !_MSC_VER

EmployeeCanBeInvitedForChatPatch::EmployeeCanBeInvitedForChatPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
}

void EmployeeCanBeInvitedForChatPatch::InitAsDefaultInstance() {
}

EmployeeCanBeInvitedForChatPatch::EmployeeCanBeInvitedForChatPatch(const EmployeeCanBeInvitedForChatPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
}

void EmployeeCanBeInvitedForChatPatch::SharedCtor() {
  _cached_size_ = 0;
  canbeinvitedforchat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeCanBeInvitedForChatPatch::~EmployeeCanBeInvitedForChatPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
  SharedDtor();
}

void EmployeeCanBeInvitedForChatPatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmployeeCanBeInvitedForChatPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeCanBeInvitedForChatPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeCanBeInvitedForChatPatch_descriptor_;
}

const EmployeeCanBeInvitedForChatPatch& EmployeeCanBeInvitedForChatPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToUpdate_2eproto();
  return *default_instance_;
}

EmployeeCanBeInvitedForChatPatch* EmployeeCanBeInvitedForChatPatch::default_instance_ = NULL;

EmployeeCanBeInvitedForChatPatch* EmployeeCanBeInvitedForChatPatch::New() const {
  return new EmployeeCanBeInvitedForChatPatch;
}

void EmployeeCanBeInvitedForChatPatch::Clear() {
  canbeinvitedforchat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeCanBeInvitedForChatPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool CanBeInvitedForChat = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbeinvitedforchat_)));
          set_has_canbeinvitedforchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
  return false;
#undef DO_
}

void EmployeeCanBeInvitedForChatPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
  // required bool CanBeInvitedForChat = 1;
  if (has_canbeinvitedforchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->canbeinvitedforchat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
}

::google::protobuf::uint8* EmployeeCanBeInvitedForChatPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
  // required bool CanBeInvitedForChat = 1;
  if (has_canbeinvitedforchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->canbeinvitedforchat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeCanBeInvitedForChatPatch)
  return target;
}

int EmployeeCanBeInvitedForChatPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool CanBeInvitedForChat = 1;
    if (has_canbeinvitedforchat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeCanBeInvitedForChatPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeCanBeInvitedForChatPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeCanBeInvitedForChatPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeCanBeInvitedForChatPatch::MergeFrom(const EmployeeCanBeInvitedForChatPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canbeinvitedforchat()) {
      set_canbeinvitedforchat(from.canbeinvitedforchat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeCanBeInvitedForChatPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeCanBeInvitedForChatPatch::CopyFrom(const EmployeeCanBeInvitedForChatPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeCanBeInvitedForChatPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EmployeeCanBeInvitedForChatPatch::Swap(EmployeeCanBeInvitedForChatPatch* other) {
  if (other != this) {
    std::swap(canbeinvitedforchat_, other->canbeinvitedforchat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeCanBeInvitedForChatPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeCanBeInvitedForChatPatch_descriptor_;
  metadata.reflection = EmployeeCanBeInvitedForChatPatch_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Employees
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
